namespace LeniaBeauty{using UnityEngine;using System;using System.Reflection;public class ApplyBeautyDefaults:MonoBehaviour{[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]static void Install(){var go=new GameObject("LeniaBeautyDefaults");UnityEngine.Object.DontDestroyOnLoad(go);go.AddComponent<ApplyBeautyDefaults>();}void Start(){var lv=FindViewLike();if(lv!=null){string[] k=new[]{"DispExposure","Exposure","dispExposure","DispGamma","Gamma","dispGamma","PaletteScale","paletteScale","PaletteOffset","paletteOffset","UseEdges","EdgeStrength","EdgeThreshold","UseTrail","TrailDecay","TrailWeight","TrailBoost","UseGlow","GlowThreshold","GlowSigma","GlowStrength"};object[] v=new object[]{5.8f,5.8f,5.8f,1.05f,1.05f,1.05f,0.84f,0.84f,0f,0f,true,0.45f,0.0105f,true,0.985f,0.62f,1.5f,true,0.32f,2.8f,0.85f};TrySet(lv,k,v);TrySetGradient(lv,BuildNeon());Refresh(lv);}var cam=Camera.main;if(cam){cam.allowHDR=true;cam.clearFlags=CameraClearFlags.SolidColor;cam.backgroundColor=FromHex("#02040A");}}MonoBehaviour FindViewLike(){var list=UnityEngine.Object.FindObjectsByType<MonoBehaviour>(FindObjectsInactive.Include,FindObjectsSortMode.None);foreach(var mb in list){var n=mb.GetType().Name;if(n.IndexOf("LeniaView",System.StringComparison.OrdinalIgnoreCase)>=0||n.IndexOf("LeniaDisplay",System.StringComparison.OrdinalIgnoreCase)>=0||n.IndexOf("Palette",System.StringComparison.OrdinalIgnoreCase)>=0)return mb;}return null;}void TrySet(MonoBehaviour t,string[] k,object[] v){var tp=t.GetType();for(int i=0;i<k.Length&&i<v.Length;i++){var key=k[i];var val=v[i];var f=tp.GetField(key,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase);if(f!=null){Set(f,t,val);continue;}var p=tp.GetProperty(key,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase);if(p!=null&&p.CanWrite)Set(p,t,val);}}void TrySetGradient(MonoBehaviour t,Gradient g){var tp=t.GetType();var names=new[]{"palette","Palette","gradient","Gradient"};foreach(var name in names){var f=tp.GetField(name,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase);if(f!=null&&f.FieldType==typeof(Gradient)){try{f.SetValue(t,g);}catch{}Refresh(t);return;}var p=tp.GetProperty(name,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase);if(p!=null&&p.CanWrite&&p.PropertyType==typeof(Gradient)){try{p.SetValue(t,g);}catch{}Refresh(t);return;}}}void Refresh(MonoBehaviour t){TryInvoke(t,new[]{"RebuildLUT","RebuildLut","RebuildPalette","ApplyPalette","ApplyParams","Apply"});}void TryInvoke(MonoBehaviour t,string[] names){var tp=t.GetType();foreach(var n in names){var m=tp.GetMethod(n,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase,System.Type.DefaultBinder,System.Type.EmptyTypes,null);if(m!=null){try{m.Invoke(t,null);}catch{}}}}void Set(FieldInfo f,object o,object v){try{f.SetValue(o,ConvertTo(v,f.FieldType));}catch{}}void Set(PropertyInfo p,object o,object v){try{p.SetValue(o,ConvertTo(v,p.PropertyType));}catch{}}object ConvertTo(object v,System.Type t){if(t==typeof(Color)){if(v is string s&&ColorUtility.TryParseHtmlString(s,out var c))return c;if(v is Color c2)return c2;}if(t.IsEnum)return System.Enum.ToObject(t,v);return System.Convert.ChangeType(v,t);}Color FromHex(string hex){Color c;if(!ColorUtility.TryParseHtmlString(hex,out c))c=Color.black;return c;}Gradient BuildNeon(){// Neon Cyan -> White -> Magenta on near-black
var g=new Gradient();g.SetKeys(new[]{new GradientColorKey(FromHex("#000005"),0f),new GradientColorKey(FromHex("#00141C"),0.05f),new GradientColorKey(FromHex("#0AE7FF"),0.30f),new GradientColorKey(FromHex("#FFFFFF"),0.55f),new GradientColorKey(FromHex("#FF66FF"),0.80f),new GradientColorKey(FromHex("#2A002A"),1f)},new[]{new GradientAlphaKey(1f,0f),new GradientAlphaKey(1f,1f)});return g;}}}
