namespace LeniaBeauty{using UnityEngine;using System;using System.Reflection;public class ApplyBeautyDefaults:MonoBehaviour{[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]static void Install(){var go=new GameObject("LeniaBeautyDefaults");Object.DontDestroyOnLoad(go);go.AddComponent<ApplyBeautyDefaults>();}void Start(){var lv=FindLeniaView();if(lv!=null){string[] k=new[]{"DispExposure","Exposure","dispExposure","DispGamma","Gamma","dispGamma","PaletteScale","paletteScale","UseEdges","EdgeStrength","EdgeThreshold","UseTrail","TrailDecay","TrailWeight","TrailBoost","UseGlow","GlowThreshold","GlowSigma","GlowStrength"};object[] v=new object[]{5.5f,5.5f,5.5f,1.05f,1.05f,1.05f,0.86f,0.86f,true,0.4f,0.011f,true,0.985f,0.6f,1.4f,true,0.35f,2.2f,0.7f};TrySet(lv,k,v);}var cam=Camera.main;if(cam)cam.allowHDR=true;}MonoBehaviour FindLeniaView(){foreach(var mb in GameObject.FindObjectsOfType<MonoBehaviour>(true)){var n=mb.GetType().Name;if(n.IndexOf("LeniaView",StringComparison.OrdinalIgnoreCase)>=0)return mb;}return null;}void TrySet(MonoBehaviour t,string[] k,object[] v){var tp=t.GetType();for(int i=0;i<k.Length&&i<v.Length;i++){var key=k[i];var val=v[i];var f=tp.GetField(key,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase);if(f!=null){Set(f,t,val);continue;}var p=tp.GetProperty(key,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase);if(p!=null&&p.CanWrite)Set(p,t,val);}}void Set(FieldInfo f,object o,object v){try{f.SetValue(o,ConvertTo(v,f.FieldType));}catch{}}void Set(PropertyInfo p,object o,object v){try{p.SetValue(o,ConvertTo(v,p.PropertyType));}catch{}}object ConvertTo(object v,Type t){if(t==typeof(Color)){if(v is string s&&ColorUtility.TryParseHtmlString(s,out var c))return c;if(v is Color c2)return c2;}if(t.IsEnum)return Enum.ToObject(t,v);return Convert.ChangeType(v,t);} }}
