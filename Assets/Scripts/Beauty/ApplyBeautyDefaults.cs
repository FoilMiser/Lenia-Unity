namespace LeniaBeauty{using UnityEngine;using UnityEngine.UI;using System.Collections;using System.Reflection;public class ApplyBeautyDefaults:MonoBehaviour{[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]static void Install(){var go=new GameObject("LeniaBeauty_Colors"); UnityEngine.Object.DontDestroyOnLoad(go); go.AddComponent<ApplyBeautyDefaults>();}IEnumerator Start(){yield return new WaitForSeconds(0.6f); Apply(); yield return new WaitForEndOfFrame(); Apply();}void Apply(){int comps=0,mats=0,setColors=0; Color neonTrail=Hex("#FF66FF"); Color neonGlow=Hex("#0AE7FF"); Color edgeWhite=new Color(1,1,1,1); var all=UnityEngine.Object.FindObjectsByType<MonoBehaviour>(FindObjectsInactive.Include,FindObjectsSortMode.None); foreach(var mb in all){string tn=mb.GetType().Name.ToLowerInvariant(); if(!(tn.Contains("leniaview")||tn.Contains("leniadisplay")||tn.Contains("lenia"))) continue; bool touched=false; // try fields/properties
touched |= TrySetColor(mb,"trail",neonTrail); touched |= TrySetColor(mb,"glow",neonGlow); touched |= TrySetColor(mb,"edge",edgeWhite); // materials on RawImage/Renderer or field "mat"
Material mat=null; var f=mb.GetType().GetField("mat",BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase); if(f!=null && f.GetValue(mb) is Material fm) mat=fm; if(mat==null){var ri=mb.GetComponent<RawImage>(); if(ri&&ri.material) mat=ri.material;} if(mat==null){var r=mb.GetComponent<Renderer>(); if(r&&r.material) mat=r.material;} if(mat){mats++; // iterate shader color properties and set those with names we care about
var sh=mat.shader; if(sh!=null){int pc=sh.GetPropertyCount(); for(int i=0;i<pc;i++){ if(sh.GetPropertyType(i)!=UnityEngine.Rendering.ShaderPropertyType.Color) continue; string pname=sh.GetPropertyName(i); string low=pname.ToLowerInvariant(); if(low.Contains("trail")){mat.SetColor(pname,neonTrail); setColors++; touched=true;} else if(low.Contains("glow")){mat.SetColor(pname,neonGlow); setColors++; touched=true;} else if(low.Contains("edge")){mat.SetColor(pname,edgeWhite); setColors++; touched=true;} else if(low.Contains("tint")){ // generic tint -> bias toward glow cyan
mat.SetColor(pname,neonGlow); setColors++; touched=true;} } } } if(touched){TryInvoke(mb,new[]{"Apply","ApplyParams","OnValidate"}); comps++;} } var cam=Camera.main; if(cam){cam.allowHDR=true; cam.clearFlags=CameraClearFlags.SolidColor; cam.backgroundColor=new Color(0.01f,0.02f,0.04f,1f);} Debug.Log($"[Beauty/Colors] comps={comps}, mats={mats}, setColors={setColors}");} bool TrySetColor(MonoBehaviour mb,string contains,Color c){bool any=false; var tp=mb.GetType(); foreach(var fld in tp.GetFields(BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic)){ if(fld.FieldType==typeof(Color) && fld.Name.ToLowerInvariant().Contains(contains)){ try{fld.SetValue(mb,c); any=true;}catch{}} } foreach(var prop in tp.GetProperties(BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic)){ if(prop.PropertyType==typeof(Color) && prop.CanWrite && prop.Name.ToLowerInvariant().Contains(contains)){ try{prop.SetValue(mb,c); any=true;}catch{}} } return any; } void TryInvoke(MonoBehaviour t,string[] names){var tp=t.GetType(); foreach(var n in names){var m=tp.GetMethod(n,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase,System.Type.DefaultBinder,System.Type.EmptyTypes,null); if(m!=null){ try{m.Invoke(t,null);}catch{} } }} Color Hex(string s){Color c; if(!ColorUtility.TryParseHtmlString(s,out c)) c=Color.magenta; return c;} } }
