namespace LeniaBeauty{using UnityEngine;using UnityEngine.UI;using System;using System.Reflection;using System.Collections;public class ApplyBeautyDefaults:MonoBehaviour{[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]static void Install(){var go=new GameObject("LeniaBeauty_GradientOverride"); UnityEngine.Object.DontDestroyOnLoad(go); go.AddComponent<ApplyBeautyDefaults>();}IEnumerator Start(){yield return new WaitForSeconds(0.6f); Apply(); yield return new WaitForEndOfFrame(); Apply();}void Apply(){var neon=BuildNeon(); var lut=BuildLUT(neon,512); int mbCount=0, gradFieldsSet=0, gradPropsSet=0, lutFieldsSet=0, rebuildCalls=0; var all=UnityEngine.Object.FindObjectsByType<MonoBehaviour>(FindObjectsInactive.Include,FindObjectsSortMode.None); foreach(var mb in all){bool touched=false; var tp=mb.GetType(); // set *every* Gradient field
foreach(var f in tp.GetFields(BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic)){ if(f.FieldType==typeof(Gradient)){ try{ f.SetValue(mb,neon); gradFieldsSet++; touched=true; }catch{} } if(typeof(Texture2D).IsAssignableFrom(f.FieldType) && NameLooksLUT(f.Name)){ try{ f.SetValue(mb,lut); lutFieldsSet++; touched=true; }catch{} } } // set *every* Gradient property with a setter
foreach(var p in tp.GetProperties(BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic)){ if(p.CanWrite && p.PropertyType==typeof(Gradient)){ try{ p.SetValue(mb,neon); gradPropsSet++; touched=true; }catch{} } if(p.CanWrite && typeof(Texture2D).IsAssignableFrom(p.PropertyType) && NameLooksLUT(p.Name)){ try{ p.SetValue(mb,lut); lutFieldsSet++; touched=true; }catch{} } } if(touched){ // try common rebuild hooks
rebuildCalls += TryInvoke(mb,new[]{"RebuildLUT","RebuildLut","RebuildPalette","ApplyPalette","ApplyParams","OnValidate","Apply"}) ? 1:0; mbCount++; } } // camera background (RawImage covers screen, so this is just for scene gaps)
var cam=Camera.main; if(cam){ cam.allowHDR=true; cam.clearFlags=CameraClearFlags.SolidColor; cam.backgroundColor=new Color(0.01f,0.02f,0.04f,1f);} Debug.Log($"[Beauty/GradientOverride] mb={mbCount}, gradFields={gradFieldsSet}, gradProps={gradPropsSet}, lutFields={lutFieldsSet}, rebuilds={rebuildCalls}"); } bool NameLooksLUT(string n){n=n.ToLowerInvariant(); return n.Contains("lut")||n.Contains("palette")||n.Contains("grad");} bool TryInvoke(MonoBehaviour t,string[] names){var tp=t.GetType();bool any=false; foreach(var n in names){var m=tp.GetMethod(n,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase,System.Type.DefaultBinder,System.Type.EmptyTypes,null); if(m!=null){ try{ m.Invoke(t,null); any=true; }catch{} } } return any; } Texture2D BuildLUT(Gradient g,int steps){var tex=new Texture2D(steps,1,TextureFormat.RGBA32,false,true){ wrapMode=TextureWrapMode.Clamp, filterMode=FilterMode.Bilinear }; for(int i=0;i<steps;i++){ float t=(float)i/(steps-1); tex.SetPixel(i,0,g.Evaluate(t)); } tex.Apply(false,false); return tex;} Gradient BuildNeon(){ // deep-black -> cyan -> white -> magenta
var g=new Gradient(); g.SetKeys(new[]{ new GradientColorKey(new Color(0.00f,0.00f,0.02f),0f), new GradientColorKey(new Color(0.00f,0.08f,0.11f),0.05f), new GradientColorKey(new Color(0.04f,0.91f,1.00f),0.30f), new GradientColorKey(Color.white,0.55f), new GradientColorKey(new Color(1.00f,0.40f,1.00f),0.80f), new GradientColorKey(new Color(0.16f,0.00f,0.16f),1f)}, new[]{ new GradientAlphaKey(1f,0f), new GradientAlphaKey(1f,1f)}); return g;} } }
