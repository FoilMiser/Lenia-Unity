namespace LeniaBeauty{using UnityEngine;using System;using System.Reflection; public class ApplyBeautyDefaults:MonoBehaviour{ [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)] static void Install(){var go=new GameObject("LeniaBeautyDefaults"); Object.DontDestroyOnLoad(go); go.AddComponent<ApplyBeautyDefaults>(); } void Start(){var lv=FindLeniaView(); if(lv!=null){ string[] k=new[]{"DispExposure","Exposure","dispExposure","DispGamma","Gamma","dispGamma","PaletteScale","paletteScale","UseEdges","EdgeStrength","EdgeThreshold","UseTrail","TrailDecay","TrailWeight","TrailBoost","UseGlow","GlowThreshold","GlowSigma","GlowStrength"}; object[] v=new object[]{6.0f,6.0f,6.0f,1.12f,1.12f,1.12f,0.90f,0.90f,true,0.35f,0.012f,true,0.975f,0.5f,1.3f,true,0.38f,2.0f,0.55f}; TrySet(lv,k,v); TrySetGradient(lv,BuildCobalt()); } var cam=Camera.main; if(cam){ cam.allowHDR=true; cam.clearFlags=CameraClearFlags.SolidColor; cam.backgroundColor=FromHex("#0B1A3A"); } } MonoBehaviour FindLeniaView(){foreach(var mb in GameObject.FindObjectsOfType<MonoBehaviour>(true)){var n=mb.GetType().Name; if(n.IndexOf("LeniaView",StringComparison.OrdinalIgnoreCase)>=0) return mb;} return null;} void TrySet(MonoBehaviour t,string[] k,object[] v){var tp=t.GetType(); for(int i=0;i<k.Length&&i<v.Length;i++){var key=k[i]; var val=v[i]; var f=tp.GetField(key,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase); if(f!=null){Set(f,t,val); continue;} var p=tp.GetProperty(key,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase); if(p!=null && p.CanWrite) Set(p,t,val);} } void TrySetGradient(MonoBehaviour t, Gradient g){var tp=t.GetType(); var names=new[]{"palette","Palette","gradient","Gradient"}; foreach(var name in names){ var f=tp.GetField(name, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase); if(f!=null && f.FieldType==typeof(Gradient)){ try{ f.SetValue(t,g);}catch{} return;} var p=tp.GetProperty(name, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.IgnoreCase); if(p!=null && p.CanWrite && p.PropertyType==typeof(Gradient)){ try{ p.SetValue(t,g);}catch{} return; } } } void Set(FieldInfo f,object o,object v){try{f.SetValue(o,ConvertTo(v,f.FieldType));}catch{}} void Set(PropertyInfo p,object o,object v){try{p.SetValue(o,ConvertTo(v,p.PropertyType));}catch{}} object ConvertTo(object v,Type t){if(t==typeof(Color)){ if(v is string s && ColorUtility.TryParseHtmlString(s,out var c)) return c; if(v is Color c2) return c2;} if(t.IsEnum) return Enum.ToObject(t,v); return Convert.ChangeType(v,t);} Color FromHex(string hex){ Color c; if(!ColorUtility.TryParseHtmlString(hex, out c)) c=Color.black; return c;} Gradient BuildCobalt(){ var g=new Gradient(); g.SetKeys( new[]{ new GradientColorKey(FromHex("#0B1A3A"),0f), new GradientColorKey(FromHex("#1F53FF"),0.25f), new GradientColorKey(FromHex("#CFE9FF"),0.55f), new GradientColorKey(FromHex("#94D1B5"),0.8f), new GradientColorKey(FromHex("#1C3B7A"),1f)}, new[]{ new GradientAlphaKey(1f,0f), new GradientAlphaKey(1f,1f)}); return g;} } }
