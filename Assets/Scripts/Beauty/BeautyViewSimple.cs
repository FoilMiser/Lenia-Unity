namespace LeniaBeauty{ using UnityEngine; using UnityEngine.UI; public class BeautyViewSimple:MonoBehaviour{ Shader sh; Material mat; RawImage ri; void Start(){ var old=GameObject.Find("LeniaViewCanvas"); if(old) old.SetActive(false); var sim=Object.FindFirstObjectByType<MonoBehaviour>(); Texture src=null; // try to get sim.CurrentTexture by reflection to avoid tight coupling
 var t=sim?sim.GetType():null; if(t!=null){ var p=t.GetProperty("CurrentTexture",System.Reflection.BindingFlags.Instance|System.Reflection.BindingFlags.Public|System.Reflection.BindingFlags.NonPublic); if(p!=null) src=p.GetValue(sim) as Texture; } var cv=new GameObject("BeautyCanvas",typeof(Canvas),typeof(CanvasScaler),typeof(GraphicRaycaster)); var c=cv.GetComponent<Canvas>(); c.renderMode=RenderMode.ScreenSpaceOverlay; var go=new GameObject("BeautyRawImage",typeof(RawImage)); go.transform.SetParent(cv.transform,false); ri=go.GetComponent<RawImage>(); var rt=ri.rectTransform; rt.anchorMin=Vector2.zero; rt.anchorMax=Vector2.one; rt.offsetMin=rt.offsetMax=Vector2.zero; sh=Shader.Find("Hidden/Lenia/TextureLUT"); mat=new Material(sh); ri.material=mat; if(src) ri.texture=src; ApplyNeon(); var cam=Camera.main; if(cam){ cam.allowHDR=true; cam.clearFlags=CameraClearFlags.SolidColor; cam.backgroundColor=new Color(0.01f,0.02f,0.04f,1); } } void ApplyNeon(){ var lut=new Texture2D(256,1,TextureFormat.RGBA32,false,true); lut.wrapMode=TextureWrapMode.Clamp; lut.filterMode=FilterMode.Bilinear; for(int i=0;i<256;i++){ float t=i/255f; Color c; if(t<0.05f) c=Color.Lerp(new Color(0,0,0.02f,1),new Color(0,0.08f,0.11f,1),t/0.05f); else if(t<0.30f) c=Color.Lerp(new Color(0,0.08f,0.11f,1),new Color(0.04f,0.91f,1f,1),(t-0.05f)/0.25f); else if(t<0.55f) c=Color.Lerp(new Color(0.04f,0.91f,1f,1),Color.white,(t-0.30f)/0.25f); else if(t<0.80f) c=Color.Lerp(Color.white,new Color(1,0.4f,1,1),(t-0.55f)/0.25f); else c=Color.Lerp(new Color(1,0.4f,1,1),new Color(0.16f,0,0.16f,1),(t-0.80f)/0.20f); lut.SetPixel(i,0,c);} lut.Apply(false,false); mat.SetTexture("_LUT",lut); mat.SetFloat("_Exposure",6f); mat.SetFloat("_Gamma",1.05f); mat.SetFloat("_Edge",0.45f); mat.SetFloat("_Thresh",0.008f);} } }
